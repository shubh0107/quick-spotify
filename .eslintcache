[{"/Users/shubham/dev/quick-spotify/src/reportWebVitals.js":"1","/Users/shubham/dev/quick-spotify/src/App.js":"2","/Users/shubham/dev/quick-spotify/src/index.js":"3","/Users/shubham/dev/quick-spotify/src/SpotifyService.js":"4","/Users/shubham/dev/quick-spotify/src/hooks/useLocalStorage.js":"5","/Users/shubham/dev/quick-spotify/src/pages/utilities/constants.js":"6","/Users/shubham/dev/quick-spotify/src/pages/Login.js":"7","/Users/shubham/dev/quick-spotify/src/pages/Home.js":"8","/Users/shubham/dev/quick-spotify/src/components/index.js":"9","/Users/shubham/dev/quick-spotify/src/components/Button.js":"10","/Users/shubham/dev/quick-spotify/src/components/Modal.js":"11","/Users/shubham/dev/quick-spotify/src/components/Header.js":"12"},{"size":362,"mtime":1607720098482,"results":"13","hashOfConfig":"14"},{"size":816,"mtime":1621176822114,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1607720098482,"results":"16","hashOfConfig":"14"},{"size":270,"mtime":1607758139844,"results":"17","hashOfConfig":"14"},{"size":494,"mtime":1607843932365,"results":"18","hashOfConfig":"14"},{"size":1939,"mtime":1621187676793,"results":"19","hashOfConfig":"14"},{"size":4282,"mtime":1621188788466,"results":"20","hashOfConfig":"14"},{"size":7591,"mtime":1621187676792,"results":"21","hashOfConfig":"14"},{"size":132,"mtime":1621187676790,"results":"22","hashOfConfig":"14"},{"size":385,"mtime":1608748806088,"results":"23","hashOfConfig":"14"},{"size":3955,"mtime":1621187676790,"results":"24","hashOfConfig":"14"},{"size":666,"mtime":1621187676789,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1os3mv1",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},"/Users/shubham/dev/quick-spotify/src/reportWebVitals.js",[],["53","54"],"/Users/shubham/dev/quick-spotify/src/App.js",[],"/Users/shubham/dev/quick-spotify/src/index.js",[],"/Users/shubham/dev/quick-spotify/src/SpotifyService.js",[],"/Users/shubham/dev/quick-spotify/src/hooks/useLocalStorage.js",[],"/Users/shubham/dev/quick-spotify/src/pages/utilities/constants.js",[],"/Users/shubham/dev/quick-spotify/src/pages/Login.js",["55","56","57","58"],"/Users/shubham/dev/quick-spotify/src/pages/Home.js",["59","60","61","62","63"],"import { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useHistory } from 'react-router-dom';\nimport SpotifyService from '../SpotifyService';\nimport './Home.scss';\n// import { Button } from '../components';\nimport { Header, Modal, SelectedTrack } from '../components';\n\n// import { useTransition, useSpring, animated } from 'react-spring';\n\nimport { AnimatePresence, AnimateSharedLayout, motion } from 'framer-motion';\n\nconst Home = props => {\n\n  let history = useHistory();\n  const [accessToken, setAccessToken] = useLocalStorage('accessToken');\n  const [topTracks, setTopTracks] = useState(null);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [modalVisibility, setModalVisibility] = useState(true);\n  const [selectedTrack, setSelectedTrack] = useState(null);\n\n  const spotify = useRef(null);\n\n  const [openModal, setOpenModal] = useState(false);\n\n\n  useEffect(() => {\n    if (!accessToken || accessToken === '') {\n      history.push('/');\n    } else {\n      spotify.current = new SpotifyService(accessToken);\n      let promise1 = spotify.current.spotifyApi.getMyTopTracks({\n        limit: 50,\n        time_range: 'short_term',\n        offset: 0\n      });\n      let promise2 = spotify.current.spotifyApi.getMyTopTracks({\n        limit: 50,\n        time_range: 'medium_term',\n        offset: 0,\n      });\n      let promise3 = spotify.current.spotifyApi.getMyTopTracks({\n        limit: 50,\n        time_range: 'long_term',\n        offset: 0\n      });\n\n      Promise.all([promise1, promise2, promise3])\n        .then(res => {\n          console.log('response: ', res);\n          setTopTracks(res);\n        }).catch(err => {\n          console.log('error: ', err);\n          if (err.status === 401) {\n            setAccessToken('');\n          }\n        })\n    }\n  }, [accessToken, history, spotify, setAccessToken])\n\n  function getTrackDetails(trackId) {\n    return spotify.current.spotifyApi.getTrack(trackId);\n  }\n\n  if (!topTracks) {\n    return <div className=\"h-screen bg-gray-900 text-white text-center\">Loading....</div>\n  }\n\n  if (topTracks) {\n    // return <div className=\"h-full grid grid-cols-2 place-items-auto bg-gray-900 text-white p-10\">\n    return (\n      <div className=\"relative\">\n        <AnimateSharedLayout type=\"crossfade\">\n          <Header />\n\n          {/* <div className=\"min-h-screen h-full flex justify-between bg-gray-900 text-white px-10 pb-10\"> */}\n          <div className=\"min-h-screen h-full grid grid-cols-2 gap-4 justify-items-center px-4 md:px-8 lg:px-10 pt-10 pb-10 bg-gray-900 text-white \">\n            <motion.div\n              // className=\"pt-5 px-5 -mx-5 w-1/2\"\n              // className=\"top-36\"\n              initial={false}\n              animate={{\n                opacity: selectedTrack ? 0 : 1,\n              }}\n            >\n              <h3 className=\"mb-2 sticky\">Last Month</h3>\n              <TopSongs\n                tracks={topTracks[0].items}\n                currentTrack={currentTrack}\n                setCurrentTrack={setCurrentTrack}\n                getTrackDetails={getTrackDetails}\n                setSelectedTrack={setSelectedTrack}\n              />\n              <h3 className=\"mb-2\">Last 6 Months</h3>\n              <TopSongs\n                tracks={topTracks[1].items}\n                currentTrack={currentTrack}\n                setCurrentTrack={setCurrentTrack}\n                getTrackDetails={getTrackDetails}\n                setSelectedTrack={setSelectedTrack}\n              />\n              <h3 className=\"mb-2\">All Time</h3>\n              <TopSongs\n                tracks={topTracks[2].items}\n                currentTrack={currentTrack}\n                setCurrentTrack={setCurrentTrack}\n                getTrackDetails={getTrackDetails}\n                setSelectedTrack={setSelectedTrack}\n              />\n            </motion.div>\n\n            <div\n            // className=\"py-5 w-1/2\"\n            >\n              <AnimatePresence>\n                {currentTrack ?\n                  <TrackPreview track={currentTrack}\n                    getTrackDetails={getTrackDetails}\n                    accessToken={accessToken}\n                    selectedTrack={selectedTrack}\n                  /> : ''\n                }\n              </AnimatePresence>\n            </div>\n            {/* <div> */}\n            {/* <Button onClick={() => setOpenModal(true)}>Open</Button> */}\n            {/* </div> */}\n            <Modal visible={modalVisibility} setModalVisibility={setModalVisibility} />\n          </div>\n          <AnimatePresence>\n            {selectedTrack ?\n              <SelectedTrack\n                selectedTrack={selectedTrack}\n                setSelectedTrack={setSelectedTrack}\n                accessToken={accessToken}\n              />\n              : ''\n            }\n          </AnimatePresence>\n        </AnimateSharedLayout>\n      </div>\n    )\n  }\n}\n\n\n\nconst TopSongs = ({ tracks, currentTrack, setCurrentTrack, getTrackDetails, setSelectedTrack }) => {\n  const currentAudio = useRef(null);\n\n  function playAudio(track) {\n    // let isPreviousAudioPlaying = currentAudio.current.currentTime > 0 &&\n    //  !currentAudio.current.paused && !currentAudio.current.ended && currentAudio.current.readyState > 2;\n\n    // if (isPreviousAudioPlaying) {\n    //   currentAudio.current.pause();\n    // }\n\n    // if (currentAudio.current && currentAudio.current.currentTime > 0) {\n    //   currentAudio.current.pause();\n    // }\n    setCurrentTrack(track);\n    let { id, preview_url } = track;\n\n    if (preview_url) {\n      // currentAudio.current = new Audio(preview_url);\n      // currentAudio.current.play();\n    } else {\n      // getTrackDetails(`${id}?market=from_token`).then(trackDetails => {\n      //   console.log('track data: ', trackDetails);\n      //   // currentAudio.current = new Audio(trackDetails.preview_url);\n      //   // currentAudio.current.play();\n      // }).catch(err => {\n      //   console.log('error: ', err);\n      // })\n    }\n  }\n\n  function stopAudio(url) {\n    // currentAudio.current.pause();\n    // setCurrentTrack(null)\n  }\n\n  return (\n    <div className=\"grid grid-cols-5 lg:grid-cols-10 mb-5\">\n      {tracks.map(track => {\n        const { id, name, album } = track;\n        const { images } = album;\n        return (\n          <motion.div\n            // layout\n            key={id}\n            // initial={{ opacity: 1 }}\n            // className=\"z-0 transform ease-in-out transition hover:scale-150 hover:z-20 hover:shadow-lg\"\n            className=\"z-0 cursor-pointer\"\n            // style={{ opacity: currentTrack ? 1 : 0 }}\n            onMouseEnter={e => playAudio(track)}\n            onMouseLeave={e => stopAudio(track)}\n            whileHover={{ scale: 1.5, zIndex: 2 }}\n            onClick={() => setSelectedTrack(track)}\n\n          >\n            <img src={images[0].url} alt=\"song-img\" />\n          </motion.div>\n        )\n      })}\n    </div>\n  )\n}\n\n\nconst TrackPreview = ({ track, getTrackDetails, accessToken, selectedTrack }) => {\n  let { id, preview_url } = track;\n  const currentAudio = useRef(null);\n\n  const CancelToken = axios.CancelToken;\n  const source = CancelToken.source();\n\n\n\n  useEffect(() => {\n\n    function playAudio(url) {\n      if (url) {\n        currentAudio.current = new Audio(url);\n        // currentAudio.current.play();\n      } else {\n        axios.get(`https://api.spotify.com/v1/tracks/${id}?market=from_token`, {\n          headers: { 'Authorization': `Bearer ${accessToken}` },\n          cancelToken: source.token\n        }).then(({ data }) => {\n          console.log('playng audio: ', data);\n          if (data.preview_url) {\n            playAudio(data.preview_url);\n          }\n        }).catch(err => {\n          if (axios.isCancel(err)) {\n            console.log('Request canceled', err.message);\n          } else {\n            console.log('error: ', err);\n          }\n        })\n      }\n\n    }\n\n    if (currentAudio.current) {\n      // currentAudio.current.pause();\n    }\n\n    playAudio(preview_url);\n\n    return () => {\n      source.cancel('New track received.');\n\n      if (currentAudio.current) {\n        // currentAudio.current.pause();\n      }\n    }\n  }, [id, preview_url, getTrackDetails, accessToken, source]);\n\n  if (track) {\n    const { id, name, album, artists } = track;\n    const { images } = album;\n    const artistName = artists.reduce(((completeName, artist, index) => {\n      if (index === artists.length - 1 && artists.length > 1) {\n        completeName += ' & ';\n      } else {\n        completeName += index !== 0 ? ', ' : '';\n      }\n      return completeName += ` ${artist.name}`\n    }), '');\n    return (\n      <motion.div\n        // className=\"sticky top-1/4 lg:top-32 md:m-2 lg:m-10 float-right lg:my-0\"\n        className=\"sticky top-36 mt-8\"\n        initial={{ x: 500, opacity: 0 }}\n        animate={{ x: 0, opacity: 1 }}\n        exit={{ opacity: 0 }}\n        // exit={{ scale: 0, opacity: 0, duration: 0.1 }}\n        transition={{\n          // stiffness: 90\n        }}\n        key={`current-track-main-div-${id}`}\n        layoutId={`selected-track-parent-${id}`}\n\n      >\n        <motion.div className=\"w-full z-10\"\n          key={`small-preview-${id}`}\n          layoutId={`selected-track-image-${id}`}\n          animate={{ opacity: selectedTrack ? 0 : 1 }}\n        >\n          <img src={images[0].url} alt={name} />\n        </motion.div>\n        <div className=\"overflow-hidden mt-2\">\n          <motion.div\n            initial={{ height: 0, y: -60 }}\n            animate={{\n              height: 'auto',\n              y: 0,\n              transition: {\n                delay: 0.3,\n                duration: 0.2,\n              }\n            }}\n          >\n            <motion.h2\n              className=\"inline-flex text-2xl leading-tight\"\n              layoutId={`selected-track-name-${id}`}\n            >\n              {name}\n            </motion.h2>\n            <br />\n            <motion.h3\n              className=\"inline-flex text-sm italic\"\n              layoutId={`selected-track-artist-name-${id}`}\n              transition={{\n                delay: 0.6\n              }}\n            >\n              {artistName}\n            </motion.h3>\n          </motion.div>\n        </div>\n      </motion.div>\n    )\n  }\n\n  return '';\n}\n\n\nexport default Home;","/Users/shubham/dev/quick-spotify/src/components/index.js",[],"/Users/shubham/dev/quick-spotify/src/components/Button.js",[],"/Users/shubham/dev/quick-spotify/src/components/Modal.js",[],"/Users/shubham/dev/quick-spotify/src/components/Header.js",["64"],"import { useEffect, useRef, useState } from 'react';\nimport { Button } from '../components';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useHistory } from 'react-router-dom';\nimport SpotifyService from '../SpotifyService';\n\n\n\n\nconst Header = props => {\n\n  const getUserDetails = (accessToken) => {\n    const spotifyApi = new SpotifyService(accessToken);\n    return spotifyApi.spotifyApi.getMe();\n    // .then(resp => {\n    //   // setCurrentUser(resp);\n    //   return resp;\n    // }).catch(err => {\n    //   console.log(\"error in get me: \", err);\n    // })\n  }\n\n  const [accessToken, setAccessToken] = useLocalStorage('accessToken');\n  const [currentUser, setCurrentUser] = useState(accessToken ? () => {\n    getUserDetails(accessToken).then(userDetails => {\n      return userDetails;\n    }).catch(err => {\n      return null;\n    });\n  } : null);\n\n  let history = useHistory();\n  const spotify = useRef(null);\n\n  useEffect(() => {\n    if (accessToken) {\n      getUserDetails(accessToken).then(userDetails => {\n        setCurrentUser(userDetails);\n      }).catch(err => {\n        console.log('error in getting user details: ', err);\n      })\n    }\n    // return () => {\n    //   cleanup\n    // }\n  }, [accessToken])\n\n  async function logout() {\n    await setAccessToken('');\n    history.push('/');\n  }\n\n  return <header className=\"flex justify-between h-full sticky top-0 px-6 py-4 z-30 bg-gray-900 border-b border-green-500\">\n    <h1 className=\"text-3xl text-green-500 font-mono\">Quick Spotify</h1>\n    <Button onClick={logout} classes=\"flex items-center\">\n      Logout\n      {currentUser ? <UserImage image={currentUser.images[0]} userName={currentUser.display_name} /> : ''}\n    </Button>\n  </header>\n}\n\nconst UserImage = ({ image, userName }) => {\n  return <div className=\"ml-2\">\n    <img src={image.url} alt={userName} className=\"h-7 w-7 rounded-full\" />\n  </div>\n}\n\n\n\nexport default Header;",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":22,"nodeType":"71","messageId":"72","endLine":3,"endColumn":33},{"ruleId":"69","severity":1,"message":"73","line":16,"column":10,"nodeType":"71","messageId":"72","endLine":16,"endColumn":18},{"ruleId":"69","severity":1,"message":"74","line":16,"column":20,"nodeType":"71","messageId":"72","endLine":16,"endColumn":31},{"ruleId":"69","severity":1,"message":"75","line":51,"column":12,"nodeType":"71","messageId":"72","endLine":51,"endColumn":26},{"ruleId":"69","severity":1,"message":"76","line":25,"column":10,"nodeType":"71","messageId":"72","endLine":25,"endColumn":19},{"ruleId":"69","severity":1,"message":"77","line":25,"column":21,"nodeType":"71","messageId":"72","endLine":25,"endColumn":33},{"ruleId":"69","severity":1,"message":"78","line":150,"column":9,"nodeType":"71","messageId":"72","endLine":150,"endColumn":21},{"ruleId":"69","severity":1,"message":"79","line":164,"column":11,"nodeType":"71","messageId":"72","endLine":164,"endColumn":13},{"ruleId":"69","severity":1,"message":"80","line":188,"column":21,"nodeType":"71","messageId":"72","endLine":188,"endColumn":25},{"ruleId":"69","severity":1,"message":"81","line":33,"column":9,"nodeType":"71","messageId":"72","endLine":33,"endColumn":16},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'getAccessToken' is defined but never used.","'openModal' is assigned a value but never used.","'setOpenModal' is assigned a value but never used.","'currentAudio' is assigned a value but never used.","'id' is assigned a value but never used.","'name' is assigned a value but never used.","'spotify' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]